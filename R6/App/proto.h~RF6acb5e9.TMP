/*proto.h
* 2017-10-23
* Copyright(C) 2017
* liutao@chargerlink.com
*/
#ifndef __PROTO_H__
#define __PROTO_H__

#include "includes.h"
#include "x6proc.h"


#define SERVER_PKT_MAX_LEN              200

#define COST_POWER                      1  //分功率
#define COST_UNIFY                      2   //统一计费


#define NO_LOAD_TIME                    (30) //分钟


enum {
    REASON_UNKNOW = 0,
    REASON_COMM_ERR = 1,                //1.记录芯片通信故障
    REASON_RESET_TIME_ENOUGH,           //2.复位时间充够
    REASON_MONEY_ENOUGH,                //3.金额充够
    REASON_TIME_ENOUGH,                 //4.时间充够
    REASON_OVER_23H,                    //5.超过23小时
};

enum {
    STOP_NORMAL = 0,                    //0.按照服务类型（按电量充电，按时长充电，按金额充电等）正常停止充电
    STOP_SWIPE_CARD,                    //1.用户本地刷卡停止充电
    STOP_INPUT_CODE,                    //2.用户本地输入校验码停止充电
    STOP_PHONE,                         //3.用户远程结束
    STOP_ADMINI,                        //4.管理员远程结束
    STOP_EMERG_STOP,                    //5.急停按下，停止充电
    STOP_PULL_OUT,                      //6.检测到枪头断开，停止充电
    STOP_SYS_REBOOT,                    //7.系统重启停止充电
    STOP_NET_BREAK,                     //8.充电桩断线，停止充电
    STOP_POWER_OFF,                     //9.充电桩掉电，停止充电
    STOP_CHARGER_FAULT,                 //10.充电桩故障，停止充电
    STOP_CAR_FAULT,                     //11.电动车故障，停止充电
    STOP_OTHER,                         //12.其它原因，停止充电 未知原因
    STOP_METER_FAULT,                   //13.电表故障
    STOP_CARD_FAULT,                    //14.刷卡器故障
    STOP_LCD_FAULT,                     //15.LCD故障
    STOP_CHARGING_FULL,                 //16.soc 充满
    STOP_BALANCE_NOT_ENOUG,             //17.余额不足(耗尽)
    STOP_OVER_LOAD,                     //18.过载停止
    STOP_OVER_VOLTAGE,                  //19.过压停止
    STOP_LOW_VOLTAGE,                   //20.欠压停止
};

#define STOP_UNKNOW STOP_OTHER

enum {
	EVENT_START = 1,                    //1.
	EVENT_SHUT_DOWN,                    //2.
	EVENT_POWER_DROP,                   //3.
	EVENT_NET_BREAK,                    //4.
	EVENT_NET_RECONNECT,                //5.
	EVENT_START_CHARGING,               //6
	EVENT_STOP_CHARGING,                //7
	EVENT_CHARGING_FULL,                //8
	EVENT_PLUG_PULL_OUT,                //9
	EVENT_CARD_FAULT,                   //10
	EVENT_FUSE_BREAK,                   //11 保险丝熔断
	EVENT_OVER_LOAD,                    //12 负载超限
    EVENT_MULTI_OPEN_FAIL,              //13
    EVENT_ENV_TEMP_HIGH,                //14
    EVENT_CHIP_TEMP_HIGH,               //15
    EVENT_ORDER_RESEND,                 //16
    EVENT_ADJUST_ERR,                   //17
    EVENT_CHIP_FAULT,                   //18 器件故障
};

enum {
    ONE_TIMES = 0,
    MANY_TIMES,
};

enum {
    FIRST_START_CHARGING = 1,
    NET_RECOVER,
    POWER_RECOVER,
};


enum {
    EVENT_PROMPT = 1,
    EVENT_ALARM,
    EVENT_FAULT,
};

enum {
    EVENT_OCCUR = 1,
    EVENT_RECOVER,
};

enum {
    SWIPE_CARD = 1,
    SCAN_CODE,
};

enum {
    MQTT_CMD_REGISTER               = 0,            //1. 设备注册
	MQTT_CMD_START_UP               = 1,            //1. 设备登录
	MQTT_CMD_CARD_ID_REQ            = 0x02,         //2. 刷卡鉴权
	MQTT_CMD_REMOTE_SET_POWER_ON    = 0x03,         //3. 请求开始充电
	MQTT_CMD_REMOTE_SET_POWER_OFF   = 0x04,         //4. 请求停止充电
	MQTT_CMD_REPORT_POWER_ON        = 0x05,         //5. 充电开始通知
	MQTT_CMD_REPORT_POWER_OFF       = 0x06,         //6. 充电结束通知
	MQTT_CMD_HEART_BEAT             = 0x07,         //7
	MQTT_CMD_COST_DOWN              = 0x08,         //8  计费模版下发
	MQTT_CMD_COST_REQ               = 0x09,         //9  请求计费模板
	MQTT_CMD_DFU_DOWN_FW_INFO       = 0x0A,         //10 固件升级-固件信息
	MQTT_CMD_REMOTE_CTRL            = 0x0B,         //11 远程控制
	MQTT_CMD_SYS_LOG                = 0x0C,         //12 系统日志
    MQTT_CMD_EVENT_NOTICE           = 0x0D,         //13 事件通知
    MQTT_CMD_VIP_CARD_CFG           = 0x0E,         //14 VIP充电卡号配置
    MQTT_CMD_VIP_CARD_REQ           = 0x0F,         //15 请求更新VIP充电卡号
    MQTT_CMD_BIND_RELATION          = 0x10,         //16 下发设备绑定关系
    MQTT_CMD_REQ_BIND_RELATION      = 0x11,         //17 请求下发设备绑定关系
    MQTT_CMD_DEV_BIND_RELATION      = 0x16,         // 设备绑定关系反馈
};

enum {
    START_FAIL_FAULT = 1,
    START_FAIL_NO_TEMPLATE,
    START_FAIL_CHARGING,
    START_FAIL_NO_ADJUST,
    START_FAIL_PARA_ERR,
    START_FAIL_OFF_LINE,
};

//1：系统立即重启 2：开启枪头 3：关闭枪头 4：进入维护状态，关闭充电服务 5：开启充电服务 6：设定最大输出功率
//7: 设定充满功率阀值	8:设定充满时间阀值	9: 设定插枪时间阀值		10: 拔枪是否停止充电订单	11: 设置刷卡板工作模式
enum {
    SYSTEM_REBOOT = 1,
    START_CHARGING,
    STOP_CHARGING,
    STOP_SERVER,
    START_SERVER,
    MAX_OUT_POWER,
};

enum {
    CARD_AUTH = 0,
    CARD_CHECK_MONEY,
	CARD_MONTH,
};


#pragma pack(1)

typedef struct {
    uint8_t  aa;                                //0.
    uint8_t  five;                              //1.
    uint8_t  type;                              //2：x9 2：x10
    uint8_t  chargerSn[CHARGER_SN_LEN];         //3.
    uint16_t len;                               //4.
    uint8_t  ver;                               //5.
    uint16_t sn;                                //6.
    uint8_t  cmd;                               //7.
}PKT_HEAD_STR;

typedef struct {
    PKT_HEAD_STR head;
    uint8_t  data[OUT_NET_PKT_LEN];
}PKT_STR;

typedef struct {
    uint8_t  device_type[20];                   //1.设备类型
    uint8_t  register_code[16];                 //3.注册码
}REGISTER_REQ_STR;
typedef struct {
    uint8_t  result;
    uint8_t  idcode[8];                         //中心平台分配的设备识别码 bcd
}REGISTER_ACK_STR;

// start up  设备登录
typedef struct {
	uint8_t  device_type[20];                   //1.
    uint8_t  chargerSn[CHARGER_SN_LEN];         //2.桩编号 bcd
	uint8_t  fw_version;                        //3. x10版本号
	uint8_t  fw_1_ver;                          //4. X10按键板版本号
    uint8_t  sim_iccid[20];                     //5.
    uint8_t  onNetWay;                          //6.上网方式  1：本地上网；2：485路由上网；3：2.4G路由上网
    uint8_t  modeType;                          //7. 1：2G；2：4G；3：nbIot-I；4：nbIot-II
	uint8_t  login_reason;						//8. 1:上电启动			2:离线恢复重发
	uint8_t  gun_number;                        //9. 充电桩可用充电口数量，最大128个端口
	uint8_t  device_status;                     //10. 指示设备离线时曾经出现过的错误状态
	uint8_t  statistics_info[8];				//11. 统计信息
}START_UP_REQ_STR;

typedef struct {
    uint8_t  result;
	uint32_t time_utc;
    uint32_t heart_beat_interval;
}START_UP_ACK_STR;

// card identify request   刷卡鉴权
typedef struct {
	uint8_t  gun_id;                            //0.
	uint8_t  card_type;                         //1.
    uint8_t  optType;                           //2：0：刷卡鉴权，开始充电；1：仅查询余额；2：手机用户反向鉴权
	uint8_t  card_id[16];                       //3.
	uint8_t  card_psw[8];                       //4.
    uint8_t  mode;                              //5.充电模式  0：智能充满 1：按金额 2：按时长 3：按电量
	uint32_t chargingPara;                      //6.充电参数  智能充满，为0  按金额，分辨率1分  按时长，分辨率1分钟  按电量，分辨率0.01kwh
}CARD_AUTH_REQ_STR;

typedef struct {
    uint8_t  gun_id;                            //0.
	uint8_t  result;                            //1.鉴权结果
	uint8_t  cardType;                          //2. 1月卡
	uint8_t  rsv;								//3
	uint32_t user_momey;                        //4.账户余额 分
	uint8_t  order[ORDER_SECTION_LEN];          //5.订单号
}CARD_AUTH_ACK_STR;


// remote control power-on/off   远程启动充电
typedef struct {
	uint8_t  gun_id;
	uint8_t  user_type;
	uint8_t  user_account[20];                  //用户账号
	uint32_t money;                             //帐号余额 单位：分
	uint8_t  order[ORDER_SECTION_LEN];          //订单号
    uint8_t  mode;                              //充电模式  0：智能充满 1：按金额 2：按时长 3：按电量
	uint32_t chargingPara;                      //充电参数  智能充满，为0  按金额，分辨率1分  按时长，分辨率1分钟  按电量，分辨率0.01kwh
}START_CHARGING_REQ_STR;

typedef struct {
    uint8_t  gun_id;                            //0
	uint8_t  result;                            //1:启动成功  1: 启动失败
    uint8_t  failReason;                        //2：端口故障 2：没有计费模版 3：已经在充电中 4：设备没有校准 5：参数错误
}START_CHARGING_ACK_STR;


//远程结束充电
typedef struct {
	uint8_t  gun_id;
    uint8_t  resv_0; // Note: added by cedar
    uint8_t  resv_1; // Note: added by cedar
    uint8_t  resv_2; // Note: added by cedar
	uint8_t  order[ORDER_SECTION_LEN];          //订单号
}STOP_CHARGING_REQ_STR;

typedef struct {
    uint8_t  gun_id;
	uint8_t  result;
}STOP_CHARGING_ACK_STR;


// report device result power-on/off  充电开始通知
typedef struct {
	uint8_t  gun_id;                            //1.
	uint8_t  user_type;                         //2.
    uint8_t  optType;                           //3. 1：首次启动充电通知 2：充电中离线恢复重发 3：充电中系统掉电恢复重发
	uint8_t  user_account[20];                  //4.用户账号
	uint8_t  order[ORDER_SECTION_LEN];          //5. 订单号
	uint32_t start_time;                        //6.开始充电时间
	uint32_t start_power;                       //7.开始充电电量
	uint32_t money;                             //8.预消费金额  单位：分，本次充电预计消费的金额，如果为全0xff则不限制
}START_CHARGING_NOTICE_STR;

typedef struct {
    uint8_t  gun_id;
	uint8_t  result;
    uint8_t  order[ORDER_SECTION_LEN];          //5. 订单号
}START_CHARGING_NOTICE_ACK_STR;


//充电结束通知
typedef struct {
	uint8_t  gun_id;                            //1.
	uint8_t  user_type;                         //2.
    uint8_t  stop_reason;                       //3.结束原因
    uint8_t  reasonDetail;                      //4. 结束原因细节
    uint32_t errStatus;                         //5. 充电过程中曾经出现过的异常状态
    uint8_t  fwVer;                             //4.固件版本
	uint8_t  user_account[20];                  //5.用户账号
	uint8_t  order[ORDER_SECTION_LEN];          //6.订单号
	uint32_t startTime;                         //
	uint32_t stop_time;                         //7.结束充电时间
	uint32_t startElec;
	uint32_t stop_power;                        //8.结束充电电量
	uint32_t charger_cost;                      //9.订单费用  分
	uint32_t template_id;                       //10.费率id
	uint16_t chargingPower;                     //11.按功率段计费的功率，单位：w
}STOP_CHARGING_NOTICE_REQ_STR;
typedef struct {
    uint8_t  gun_id;
	uint8_t  result;
}STOP_CHARGING_NOTICE_ACK_STR;


typedef struct {
    uint8_t  gunIndex;                          //1.
    uint8_t  chipTemp;                          //2.
    uint8_t  status;                            //3.充电口状态 0 空闲 1 占用未打开或关闭 2 占用已打开，充电中 3 故障
    uint8_t  faultCode;                         //4.
    uint8_t  voltage;                           //5. 电压 1V /比特
    uint8_t  current;                           //6.输出电流 分辨率：0.1A/比特
    uint16_t power;                             //7.输出功率，单位瓦特
    uint16_t elec;                              //8.
    uint16_t money;                             //9.
    uint8_t  order[ORDER_SECTION_LEN];          //10.
}GUN_HEART_BEAT_STR;

// MQTT heart-beat  遥信及心跳
typedef struct {
    uint8_t  netSigle;                          //1. Sim卡信号
	uint8_t  envTemp;                           //2. 环境温度 度 -50度偏移  -50~200
    uint8_t Status;								//按键板状态错误次数
	uint8_t preserve[3];
    uint8_t  gunCnt;                            //3. 本次报文所包含的充电接口数目
    GUN_HEART_BEAT_STR gunStatus[MAX_TERMINAL_NUM];
}HEART_BEAT_REQ_STR;


typedef struct {
    uint32_t time;
    uint8_t  status;                            //0，	接收成功   1，	接收失败
}HEART_BEAT_ACK_STR;

typedef struct {
	uint8_t gunId;
	uint8_t result;
}EVENT_NOTICE_ACK_STR;


typedef struct {
    uint16_t startPower;                        //起始功率 单位w
    uint16_t endPower;                          //结束功率 单位w
    uint16_t price;                             //指定时长充电费用，分辨率分
    uint16_t duration;                          //计费时长,分钟  费率=100,时长=120表示1元充2小时
}segment_str;

typedef struct {
    uint8_t  segmentCnt;                        //功率段数目，1~4
    segment_str segmet[COST_TEMP_CNT];
}multiPower_t;

typedef struct {
    uint16_t  price;                            //指定时长充电费用，分辨率:分
    uint16_t  duration;                         //计费时长,分钟  费率=100,时长=120表示1元充2小时
}unify_t;

// cost template   计费模版下载
typedef struct {
    uint8_t  gunId;                             //0.
	uint32_t template_id;                       //1.
    uint8_t  mode;                              //2：按功率段计费 2按统一收费
    union {
        multiPower_t powerInfo;
        unify_t unifyInfo;
    }Data;
}COST_TEMPLATE_REQ_STR;

typedef struct {
    uint8_t  gunId;
	uint8_t  result;
}COST_TEMPLATE_ACK_STR;

typedef struct{
    uint8_t  gun_id;                            //1.
}REQ_COST_TEMPLATE_STR;


// DFU - down fw info 固件升级
typedef struct{
	char     url[48];                           //升级服务器地址，不足补0
	char     usrName[4];                        //登录用户名
	char     psw[4];                            //登录密码
    char     fileName[8];                       //文件名
	uint32_t checkSum;                          //文件字节累加和
	//uint8_t  fwType;                            //1:R6；2:X6
    //uint8_t  fwVer;                             //版本号
}DOWN_FW_REQ_STR;
typedef struct {
	uint8_t result;                             //0: 升级成功  1: 接收失败 2: 校验失败 3: 写入失败
}DOWN_FW_ACK_STR;


typedef struct {
    uint8_t  optCode;                           //1：系统立即重启 2：开启枪头 3：关闭枪头 4：进入维护状态，关闭充电服务 5：开启充电服务 6：设定最大输出功率
    uint32_t para;                              //控制参数  如果是设定功率，单位：kw
}REMO_CTRL_REQ_STR;

typedef struct {
    uint8_t  optCode;
    uint32_t para;
    uint8_t  result;
}REMO_CTRL_ACK_STR;


typedef struct {
    uint8_t  gun_id;
    uint8_t  logType;                           //1：运行日志 2：统计信息
    uint8_t  data[OUT_NET_PKT_LEN];
}SYS_LOG_STR;


/*
    1：开机
    2：关机
    3：掉电
    4：网络连接断开
    5：网络连接断开后重连
    6：开启充电
    7：结束充电
    8：充满
    9：拔插头
    10：读卡器通信故障
    11：保险丝熔断
    12：负载超限
    13：多次开启充电失败
    14：环境高温预警
    15：芯片高温预警
    16：订单补传
    17：校准异常
    18: 器件故障
    */
//事件通知
typedef struct {
    uint8_t  gun_id;                            //0. 如果是0表示整桩,1~128,插座接口
    uint8_t  code;                              //1. 事件代码
    uint8_t  para1;                             //2.
    uint32_t para2;                             //3.
    uint8_t  status;                            //4.1：产生  2：恢复
    uint8_t  level;                             //5.事件等级 1提示  2告警  3严重故障
    char     discrip[EVEN_DISCRI_LEN];          //6.事件详细描述
}EVENT_NOTICE_STR;


typedef struct {
    uint8_t  chargerSn[MAC_LEN];
}CHARGER_STR;

typedef struct {
    uint8_t  cnt;                               //x6数目
    //uint8_t Add2_4gOffSet[MAX_TERMINAL_NUM];  			//2.4g地址偏移
    CHARGER_STR chargerInfo[MAX_TERMINAL_NUM];  //X6编号
}TERMINAL_STR;

typedef struct {
    uint8_t  result;
    uint8_t  csq;
    uint8_t  ccid[ICCID_LEN];
}TEST_NET_MODE_STR;

typedef struct {
    uint8_t  type;
    uint8_t  code[8];
}WRITE_PCB_REQ_STR;

typedef struct {
    uint8_t  type;
    uint8_t  result;
}WRITE_PCB_ACK_STR;

typedef struct {
    uint8_t  type;
    uint8_t  code[8];
}READ_PCB_ACK_STR;

typedef struct{
    uint8_t  gun_id;                            //1.
}REQ_TERMINAL_STR;


typedef struct{
    uint8_t  result;                            //1.
}BIND_TERMINAL_ACK_STR;

typedef struct {
    uint8_t  cnt;                               //x6数目
    CHARGER_STR chargerInfo[MAX_TERMINAL_NUM];  //X6编号
}DEV_BIND_TERMINAL_STR;

typedef struct{
    uint8_t  result;                            //1.
}DEV_BIND_TERMINAL_ACK_STR;

#pragma pack()


int RecvServerData(void *pPkt, uint16_t len);
int SendStartUpNotice(int flag);
int SendRegister(void);
int SendReqCostTemplate(uint8_t gunId);
int SendStartChargingNotice(X6_PKT_STR *pPkt);
void CostTemplateReq(void);
void HeartBeatHandle(void);
int SendEventNotice(uint8_t gunId, uint8_t event, uint8_t para1, uint32_t para2, uint8_t status, char *pDisc);
int GetPktSum(uint8_t *pData, uint16_t len);
int SendCardAuthReq(X6_PKT_STR *pPkt);
int SendSysLog(uint8_t gunId, uint8_t logType, char *pStr);
int SendStopChargingAck(X6_PKT_STR *pPkt);
int SendStartChargingAck(X6_PKT_STR *pPkt);
void CheckBingRelation(void);
int SendStopChargingNotice(STOP_CHARGING_NOTICE_REQ_STR *pPkt);
int SendHeartBeatFun(uint8_t gun_id);
extern void CardAuthAckProc(PKT_STR *pPkt);
/*****************************************************************************
** Function name:       SendX6R6BindReq
** Descriptions:        给X6发送是否绑定成功请求
** input parameters:    pMsg
** output parameters:   None
** Returned value:		None
** Author:              quqian
*****************************************************************************/
extern int SendX6R6BindReq(PKT_STR *pPkt);
extern int SendBingRelationAck(PKT_STR *pPkt, uint8_t result);
extern void SetBindReqFlag(void);
extern void ClearBindReqFlag(void);
extern uint8_t GetBindReqFlag(void);

#endif //__PROTO_H__

t8_t GetBindReqFlag(void);

#endif //__PROTO_H__

